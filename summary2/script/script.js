// ============================================================ callback ============================================================ 
function hi(){
    console.log('Hi!');
}

function hello(){
    console.log('Hello!');
}

function welcome(callback) {
    callback()
    console.log('You are welcome!');
}
welcome(hi); // -> Hi!, You are welcome!
welcome(hello); // -> Hello!, You are welcome!


// ============================================================ (return) function ============================================================
// import { go } from "go";
// console.log(go());



// return (возврат): Используется внутри функций для возврата значения вызывающему коду.
// Прекращает выполнение функции и передает указанное значение.

// console.log (консоль.лог): Используется для вывода информации в консоль во время разработки.
// Не влияет на возврат значений из функций, просто выводит информацию в консоль.

// Итак, return используется для передачи значения из функции, 
// тогда как console.log используется для отладки и вывода информации в консоль в процессе разработки.


// function render() {
    // body
    // return
//}



function foo() {
    // console.log('78');
    return 45; // -> без return вернёт undefined
}
// чтобы увидеть в консоле (без мы нечего не увидим но оно отработает)
const result = foo();
console.log(result);


// 1.
// console.log(5);
// 5   -> пакажет в браузере
// undefined -> вернёт

// 2.
// function foo() { return 'Hello' }; 
// undefined -> вернёт если неуказать -> foo()

// 3.
// let render = (a) => { return a }; 
// undefined -> вернёт если неуказать -> render('hi');


function render() {
    let a = 4;
    let b = 4 * a;
    return b;
}
let result1 = render();
console.log(result1); // -> 16


// ================================================================= Компиляция =================================================================
// -> Мой Script -> Compiler 
// -> 1 этап компиляции: token 
// (очишение ненужного(пробелы,точки запитой итд -> let a=4; let b=5 ->после токинайзинг a4b5))
// -> 2 этап компиляции: проверка (дикларациия переменных)
// Compieler -> Scope праверяет на правельнось написания кода 
// на каждом шаге(если даёт разришение то код исполняется(если не выдаёт ошибку)) Scope -> Compieler
// (при ошибке error: is not defined)
// -> 3 этап компиляции: математичиские операции , преврашение в byte код
// Compieler -> V8 машыный код (cчитает все математические операции и преврашяет в byte код)
// Также если нужно посчитать в V8 то V8 -> (отправка на проверку) Scope тоже проверяет на правела написание кода 
// Конец Компиляции


// процес компиляции происходит последовательно с верху в низ 
// если ошибка то весь код до ошибки будет с крмпилен, после нет 


// ================================================================= scope =================================================================

// Область видимости (scope) в программировании определяет, где переменные могут быть использованы:

// 2 типы: block / functional

// Глобальная область видимости: Переменные доступны везде в коде, включая функции. 
// на всём пространстве написание кода

// Локальная область видимости: Переменные доступны только внутри функции, где были объявлены.

// Блочная область видимости (let и const): Переменные видны только внутри блока кода, в котором были объявлены. 
// {...}.. for(){...}, if(){...}, function hi(){...}, const object {...}..

// Область видимости важна для управления доступом к переменным и предотвращения конфликтов в программе.



//  ================================================================= Переменные ================================================================= 
// const
// const a = 7;

// let
// let b = 8;

// var -> нарушение правил видемости (выходит за Блочная область видимости - Scope) 
                        // -> hosting переменые будут всплывать некоректно var большой преорететности
// var c = 9;

// _global
// d = 10;

// console.log(a, b, c, d);

// ================================================================ window. ================================================================
// window.
// window.document.body -> вся информация в крации о проекте


// ============================================================== Accelerometer() ===========================================================
// Проверка поддержки акселерометра
// if (window.DeviceMotionEvent) {
//     // Событие, срабатывающее при изменении данных акселерометра
//     window.addEventListener('devicemotion', function(event) {
//         // Доступ к данным акселерометра
//         let acceleration = event.acceleration;

//         console.log('X: ' + acceleration.x);
//         console.log('Y: ' + acceleration.y);
//         console.log('Z: ' + acceleration.z);
//     });
// } else {
//     console.log('Акселерометр не поддерживается на этом устройстве.');
// }
// https://dev.to/ruppysuppy/7-more-javascript-web-apis-to-build-futuristic-websites-you-didnt-know-50bg


// ================================================================ hosting ================================================================

// Хостинг - это услуга предоставления места на сервере для хранения вашего веб-сайта и 
// делает его доступным в Интернете. Хостинг-провайдеры, такие как Bluehost или GoDaddy, 
// предоставляют серверы, на которых вы размещаете свой сайт. Доменное имя (например, www.example.com) 
// регистрируется отдельно. Виды хостинга включают общий, виртуально выделенный и облачный, 
// в зависимости от ваших потребностей.

// Cервер: Это мощный компьютер, который хранит файлы вашего веб-сайта и обрабатывает 
// запросы от пользователей.

// Хостинг-провайдер: Это компания, которая предоставляет услуги хостинга. 
// Примеры таких компаний включают Bluehost, HostGator, GoDaddy и другие.

// Доменное имя: Это уникальное имя, по которому пользователи могут обращаться 
// к вашему веб-сайту (например, www.example.com). Доменное имя регистрируется отдельно от услуги хостинга.

// в  хостинге передача переменных происходить по очиреди, только если var указано гдето вконце года оно 
// всплывёт в начале и будет некоректно
// var c = 6;
// let g = 6;
// var x = 6;
// const b = 6;
// let a = 6;

// hosting переменые будут всплывать некоректно c,x,g,b,a  
// а не -> c,g,x,b,a

// ============================================================== cтроку в число ==============================================================
let a = "4";
// явное
console.log(Number(a));
// не явное приведение типов
// console.log(+a);
// console.log(a - 0);




// ================== Boolean true/false ==================
// явное
let b = 5;  // -> true          // " ", "0", "jbvd", "1" , 1, 2..., Infinity, function...-> true
                                // "", underfined, 0 , false,  NaN, null, -> false      !!!!!!!!!!!!!!
console.log(Boolean(a));
// не явное приведение типов
console.log(!a); // false 
console.log(!!a); // true 
console.log(!!!a); // false 


// ============================================================== число в cтроку ==============================================================
let u = 4;
// явное
console.log(String(u));
// не явное приведение типов
// console.log(a + "");


// ================================================================== конкатинация ==================================================================
// конкатинация только с + 
console.log(1 + 9 + "2"); // 1+9=10  10+cтрокa "2"  =-> 102

// не конкатинация, а математическая операция
console.log(9 / "2");
console.log('9' * '2');



// ================================================================== Равенство == / === ==================================================================
// == не строгое равенство (смотрит только на значение) -> [1] + "1" -> процесс каёш -> "1"+"1"=true ("" имеет всегда высокий приоритет)
// === строгое равенство (сравнивается все и как  -> смотрит на значение и тип) -> [1] + "1" -> false

// ----- true -----
// ==
if (1 == 1) {
    console.log('true');
} else {
    console.log('false');
}
// ===
if (1 === 1) {
    console.log('true');
} else {
    console.log('false');
}
// ===
if (1 == '1') {
    console.log('true');
} else {
    console.log('false');
}

// 'human' > 'cat'
// true


// ---- false -----
// ===
if (1 === '1') {
    console.log('true');
} else {
    console.log('false');
}
